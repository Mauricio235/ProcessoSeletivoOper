class(baseFinal$franquia)
#Juntando a base franquias com demograficas
baseFinal<-merge(base_franquias, demograficas, by = "cidade")
#Como o estudo e direcionado ao numero de clientes ativos, não faz sentido estudar
#os registros que não possuem esse dado. Porém é muito importante verificar o por que
#estão ausentes esses dados juntamente com a fonte que originou os dados.
baseFinal<-na.omit(baseFinal)
#Criando uma nova coluna com o valor do indice por franquia observada
baseFinal <-baseFinal %>%
mutate( baseFinal$clientes_ativos/baseFinal$soma_pop_total)
colnames(baseFinal)[15] <- c("Indice")
#Agregando os dados por regiao para avaliação do indice
avalia_indice<-aggregate(baseFinal$Indice,
by=list(Category=baseFinal$regiao), FUN=mean)
#Criando a função para plotar o Boxplot para avaliar o indice por regiao
plot_boxplot<-function(x){
ggplot(baseFinal) +
aes(x = regiao, y = log(Indice), fill = regiao) +
geom_boxplot() +
labs(x= "Região", y= "Índice Médio", title = "Indice Medio por região",
subtitle = "Indice médio em escala logarítmica")+
scale_fill_hue(direction = 1) +
theme_minimal()
}
#Criando uma nova coluna com os anos
baseFinal$Ano <- format(baseFinal$referencia,"%Y")
#Grafico de linhas
#round dates down to week
baseFinal$month <- floor_date(baseFinal$referencia, "month")
#Criando uma função para plotar o grafico de crescimento total por ano, mês a mês
plot1_line<-function(avalia_crescimento){
avalia_crescimento %>%
ggplot(aes(x=mes, y  =x, color = Ano, group =Ano))+
geom_line()+
labs(x="Meses", y="Clientes Ativos", title = "Total de clientes ativos por ano")+
geom_point()
}
#De acordo com o grafico pode-se perceber que a região Geo NE apresentou maior indice
#medio, levando em consideração sua população.
table(baseFinal$regiao)
####################################################################################
############################ BASE DE DADOS DISTÂNCIA################################
####################################################################################
#Lendo os dados de distância
distancia <- read_excel("distancia.xlsx")
vendedor1<-distancia %>% filter(distancia$vendedor=="A001")
melt(vendedor1)
st_geometry(data.frame(vendedor1$lon, vendedor1$lat))
perimeter(data.frame(vendedor1$lon, vendedor1$lat), group_by(as.Date(vendedor1$data_visita)))
class(vendedor1$data_visita)
table(distancia$vendedor)
source("ui.R")
source("server.R")
shinyApp(ui=ui, server=server)
runApp()
runApp()
runApp()
# Define server logic required to draw a histogram
server <- function(input, output){
#Plotando o grafico de linhas
output$line<- renderPlotly({
baseFinal_input1<- baseFinal%>% filter(baseFinal$Ano== input$checkGroup)
avalia_crescimento<-aggregate(baseFinal_input1$clientes_ativos,
by=list(month=baseFinal_input1$month), FUN=sum)
avalia_crescimento$mes <- substr(avalia_crescimento$month, 6,7)
avalia_crescimento$Ano <- substr(avalia_crescimento$month, 1,4)
ggplotly(plot1_line(avalia_crescimento))
})
#plotando o boxplot
output$plot<- renderPlotly({
baseFinal_input1<- baseFinal%>% filter(baseFinal$Ano== input$checkGroup)
avalia_crescimento<-aggregate(baseFinal_input1$clientes_ativos,
by=list(month=baseFinal_input1$month), FUN=sum)
avalia_crescimento$mes <- substr(avalia_crescimento$month, 6,7)
avalia_crescimento$Ano <- substr(avalia_crescimento$month, 1,4)
boxplot1<-plot_boxplot(avalia_crescimento)
ggplotly(boxplot1)
})
#Inserindo valor a primeira caixa
output$Totalclientes <- renderValueBox({
baseFinal_input1<- baseFinal%>% filter(baseFinal$Ano== input$checkGroup)
clientes<- sum(baseFinal_input1$clientes_ativos)
valueBox(
paste0(round(clientes, digits = 2)),
subtitle = "Clientes Ativos ", color = "green"
)
})
#Plotando a tabela de indices
output$table1<- renderDataTable({
avalia_indice
})
#Plotando a estrutura da base de dados
#head of data
output$HeadData <- renderDataTable({
head(baseFinal)
escape = TRUE
})
output$code<-  renderPrint({
str(baseFinal)
})
}
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
str(baseFinal)
modelo<- glm(baseFinal$clientes_ativos~baseFinal$renda_media_familiar + baseFinal$regiao)
modelo<- glm(baseFinal$clientes_ativos~baseFinal$renda_media_familiar + baseFinal$regiao,
link= "log")
modelo<- glm(baseFinal$clientes_ativos~baseFinal$renda_media_familiar + baseFinal$regiao)
summary(modelo)
modelo<- glm(baseFinal$clientes_ativos~baseFinal$renda_media_familiar + baseFinal$Indice)
summary(modelo)
View(baseFinal)
modelo<- lm(baseFinal$clientes_ativos~baseFinal$renda_media_familiar + baseFinal$regiao)
summary(modelo)
modelo<- lm(baseFinal$clientes_ativos~baseFinal$renda_media_familiar + baseFinal$regiao+
baseFinal$cidade)
summary(modelo)
modelo<- lm(baseFinal$clientes_ativos~baseFinal$renda_media_familiar + baseFinal$regiao+
baseFinal$regiao)
summary(modelo)
modelo<- lm(baseFinal$clientes_ativos~baseFinal$renda_media_familiar + baseFinal$regiao+
baseFinal$Indice)
summary(modelo)
modelo<- lm(baseFinal$clientes_ativos~baseFinal$renda_media_familiar + baseFinal$regiao+
baseFinal$Indice+baseFinal$tipo)
summary(modelo)
#teste qui-quadrado de independencia
chisq.test(baseFinal$tipo, baseFinal$regiao)
cor(baseFinal$renda_media_familiar, baseFinal$Indice)
cor.test(baseFinal$renda_media_familiar, baseFinal$Indice)
hist(baseFinal$clientes_ativos)
modelo<-glm(baseFinal$clientes_ativos~baseFinal$tipo+baseFinal$renda_media_familiar, family = "Gamma")
modelo<-glm(baseFinal$clientes_ativos~baseFinal$tipo+baseFinal$renda_media_familiar, family = "gamma")
modelo<-glm(baseFinal$clientes_ativos~baseFinal$tipo+baseFinal$renda_media_familiar, family = Gamma(link = "log"))
na.omit(baseFinal)
modelo<-glm(baseFinal$clientes_ativos~baseFinal$tipo+baseFinal$renda_media_familiar, family = Gamma(link = "log"))
class(baseFinal$renda_media_familiar)
class(baseFinal$tipo)
class(baseFinal$clientes_ativos)
modelo<-glm(baseFinal$clientes_ativos~baseFinal$tipo+baseFinal$renda_media_familiar, family = Gamma(link = "log"))
modelo<-glm(baseFinal$clientes_ativos~baseFinal$tipo, family = Gamma(link = "log"))
table(baseFinal$clientes_ativos)
base<- baseFinal %>% filter(clientes_ativos != 0)
modelo<-glm(base$clientes_ativos~base$tipo, family = Gamma(link = "log"))
summary(modelo)
modelo<-glm(base$clientes_ativos~base$tipo+base$renda_media_familiar,family = Gamma(link = "log"))
summary(modelo)
modelo<-glm(base$clientes_ativos~base$tipo+base$renda_media_familiar+
base$regiao,family = Gamma(link = "log"))
summary(modelo)
modelo<-glm(base$clientes_ativos~base$tipo+base$renda_media_familiar+
base$regiao+base$Indice,family = Gamma(link = "log"))
summary(modelo)
modelo<-lm(base$clientes_ativos~base$tipo+base$renda_media_familiar+
base$regiao+base$Indice)
summary(modelo)
install.packages("caret")
train <- sample(nrow(baseFinal), 0.7*nrow(baseFinal), replace = FALSE)
ValidSet <- baseFinal[-train,]
TrainSet <- baseFinal[train,]
install.packages("randomForest")
library(randomForest)
model<- randomForest(TrainSet$clientes_ativos~TrainSet$renda_media_familiar+
TrainSet$franquia+TrainSet$regiao+TrainSet$tipo, data = TrainSet,
importance = T)
summary(model)
model
model$predicted
summary(model)
runApp()
shiny::runApp()
# #teste qui-quadrado de independencia
# chisq.test(baseFinal$tipo, baseFinal$regiao)
# cor.test(baseFinal$renda_media_familiar, baseFinal$Indice)
#
# hist(baseFinal$clientes_ativos)
# na.omit(baseFinal)
#
library(randomForest)
class(baseFinal$renda_media_familiar)
class(baseFinal$clientes_ativos)
base_model<- baseFinal %>% filter(Ano==2019)
base_model<- baseFinal %>% filter(Ano==2019)
train <- sample(nrow(base_model), 0.7*nrow(base_model), replace = FALSE)
TrainSet <- base_model[train,]
ValidSet <- base_model[-train,]
model<- randomForest(TrainSet$clientes_ativos~TrainSet$renda_media_familiar+
TrainSet$franquia+TrainSet$regiao+TrainSet$tipo, data = TrainSet,
importance = T)
model$predicted
summary(model)
model
model<- glm(TrainSet$clientes_ativos~TrainSet$renda_media_familiar+
TrainSet$franquia+TrainSet$regiao+TrainSet$tipo, data = TrainSet,
family = Gamma(link = "log"))
model<- glm(TrainSet$clientes_ativos~TrainSet$renda_media_familiar+
TrainSet$franquia+TrainSet$regiao+TrainSet$tipo, data = TrainSet,
family = "poisson")
model
summary(model)
model<- lm(TrainSet$clientes_ativos~TrainSet$renda_media_familiar+
TrainSet$franquia+TrainSet$regiao+TrainSet$tipo, data = TrainSet)
summary(model)
model<- lm(TrainSet$clientes_ativos~TrainSet$renda_media_familiar+
TrainSet$regiao+TrainSet$tipo, data = TrainSet)
summary(model)
model<- lm(TrainSet$clientes_ativos~TrainSet$renda_media_familiar+ as.factor(TrainSet$franquia)
TrainSet$regiao+TrainSet$tipo, data = TrainSet)
model<- lm(TrainSet$clientes_ativos~TrainSet$renda_media_familiar+ as.factor(TrainSet$franquia)+
TrainSet$regiao+TrainSet$tipo, data = TrainSet)
summary(model)
model<- glm(TrainSet$clientes_ativos~TrainSet$renda_media_familiar+ as.factor(TrainSet$franquia)+
TrainSet$regiao+TrainSet$tipo, data = TrainSet, family = "poisson")
summary(model)
model<- randomForest(TrainSet$clientes_ativos~TrainSet$renda_media_familiar+ as.factor(TrainSet$franquia)+
TrainSet$regiao+TrainSet$tipo, data = TrainSet, importance=T)
# #teste qui-quadrado de independencia
chisq.test(baseFinal$tipo, baseFinal$regiao)
#Lendo os dados de distância
distancia <- read_excel("distancia.xlsx")
distancia<-na.omit(distancia)
dist<-c()
contador<-1
for (i in unique(distancia$vendedor)){
Vend_atual<-distancia %>% filter(vendedor == i)
dist[contador]<-perimeter(data.frame(Vend_atual$lon, Vend_atual$lat))
contador<- contador + 1
}
Dist_vendedor<- data.frame(unique(distancia$vendedor), dist)
Dist_vendedor
unique(distancia$data_visita)
#tabela de distancia por dia
dis<-c()
cont<-1
#criando uma função para agregar as distancias por vendedor
for (j in unique(distancia$data_visita)){
for (i in unique(distancia$vendedor)){
Vend_atual<-distancia %>% filter(vendedor == i & data_visita== j)
dist[contador]<-perimeter(data.frame(Vend_atual$lon, Vend_atual$lat))
contador<- contador + 1
}
}
Dist_vendedor<- data.frame(unique(distancia$vendedor), dist)
Dist_vendedor
View(distancia)
perimeter(data.frame(c(7743283.944, 7746471.087), c(687623.538, 664922.950)))
data.frame(c(7743283.944, 7746471.087), c(687623.538, 664922.950))
perimeter(data.frame(c(77.43283944, 77.46471087), c(68.7623538, 66.4922950)))
perimeter(data.frame(c(77.43283944, 77.46471087), c(68.7623538, 66.4922950)))/1000
perimeter(data.frame(c(77.43283944, 77.46471087), c(68.7623538, 66.4922950)))/10000
perimeter(data.frame(c(77.47283944, 77.46471087), c(68.6223538, 66.6122950)))/10000
perimeter(data.frame(c(43.12, 43.24), c(20.21, 20.23)))
perimeter(data.frame(c(43.12, 43.24), c(20.21, 20.23)))/1000
#Convertendo para Quilômetros
Dist_vendedor<- data.frame(unique(distancia$vendedor), dist/1000)
Dist_vendedor
#tabela de distancia por dia
dista_dia<-c()
cont<-1
#criando uma função para agregar as distancias por vendedor
for (j in unique(distancia$data_visita)){
for (i in unique(distancia$vendedor)){
Vend_atual<-distancia %>% filter(vendedor == i & data_visita== j)
dista_dia[contador]<-perimeter(data.frame(Vend_atual$lon, Vend_atual$lat))
cont<- cont + 1
}
}
dista_dia<-c()
cont<-1
#criando uma função para agregar as distancias por vendedor
for (j in unique(distancia$data_visita)){
for (i in unique(distancia$vendedor)){
Vend_atual<-distancia %>% filter(vendedor == i & data_visita== j)
dista_dia[cont]<-perimeter(data.frame(Vend_atual$lon, Vend_atual$lat))
cont<- cont + 1
}
}
dista_dia
#tabela de distancia por dia
dista_dia<-data.frame(c())
dista_dia<-data.frame(c())
cont<-1
#criando uma função para agregar as distancias por vendedor
for (j in unique(distancia$data_visita)){
for (i in unique(distancia$vendedor)){
Vend_atual<-distancia %>% filter(vendedor == i & data_visita== j)
dista_dia$distancia[cont]<-perimeter(data.frame(Vend_atual$lon, Vend_atual$lat))
cont<- cont + 1
}
}
dista_dia
#tabela de distancia por dia
dista_dia<-data.frame(c())
cont<-1
#criando uma função para agregar as distancias por vendedor
for (j in unique(distancia$data_visita)){
for (i in unique(distancia$vendedor)){
Vend_atual<-distancia %>% filter(vendedor == i & data_visita== j)
dista_dia$d[cont]<-perimeter(data.frame(Vend_atual$lon, Vend_atual$lat))
cont<- cont + 1
}
}
dista_dia
Data<-c()
Vendedor<-c()
cont<-1
#criando uma função para agregar as distancias por vendedor
for (j in unique(distancia$data_visita)){
for (i in unique(distancia$vendedor)){
Vend_atual<-distancia %>% filter(vendedor == i & data_visita== j)
dista_dia[cont]<-perimeter(data.frame(Vend_atual$lon, Vend_atual$lat))
Data[cont]<- j
Vendedor[cont]<- i
cont<- cont + 1
}
}
dista_dia
#tabela de distancia por dia
dista_d<-c()
Data<-c()
Vendedor<-c()
cont<-1
#criando uma função para agregar as distancias por vendedor
for (j in unique(distancia$data_visita)){
for (i in unique(distancia$vendedor)){
Vend_atual<-distancia %>% filter(vendedor == i & data_visita== j)
dista_d[cont]<-perimeter(data.frame(Vend_atual$lon, Vend_atual$lat))
Data[cont]<- j
Vendedor[cont]<- i
cont<- cont + 1
}
}
Vendedor
dista_dia<-data.frame(Vendedor, Data, dista_d/1000)
dista_dia
unique(distancia$data_visita)
as.Date(Data)
class(Data)
View(distancia)
class(distancia$data_visita)
as.Date(unique(distancia$data_visita))
#tabela de distancia por dia
dista_d<-c()
Data<-c()
Vendedor<-c()
cont<-1
#criando uma função para agregar as distancias por vendedor
for (j in unique(distancia$data_visita)){
for (i in unique(distancia$vendedor)){
Vend_atual<-distancia %>% filter(vendedor == i & data_visita== j)
dista_d[cont]<-perimeter(data.frame(Vend_atual$lon, Vend_atual$lat))
Data[cont]<- as.Date(j)
Vendedor[cont]<- i
cont<- cont + 1
}
}
#tabela de distancia por dia
dista_d<-c()
Data<-c()
Vendedor<-c()
cont<-1
#criando uma função para agregar as distancias por vendedor
for (j in unique(distancia$data_visita)){
for (i in unique(distancia$vendedor)){
Vend_atual<-distancia %>% filter(vendedor == i & data_visita== j)
dista_d[cont]<-perimeter(data.frame(Vend_atual$lon, Vend_atual$lat))
Data[cont]<- as.Date(j)
Vendedor[cont]<- i
cont<- cont + 1
}
}
#tabela de distancia por dia
dista_d<-c()
Data<-c()
Vendedor<-c()
cont<-1
#criando uma função para agregar as distancias por vendedor
for (j in unique(distancia$data_visita)){
for (i in unique(distancia$vendedor)){
Vend_atual<-distancia %>% filter(vendedor == i & data_visita== j)
dista_d[cont]<-perimeter(data.frame(Vend_atual$lon, Vend_atual$lat))
Data[cont]<- j
Vendedor[cont]<- i
cont<- cont + 1
}
}
distancia$data_visita<-as.Date(distancia$data_visita)
dista_d<-c()
Data<-c()
Vendedor<-c()
cont<-1
#criando uma função para agregar as distancias por vendedor
for (j in unique(distancia$data_visita)){
for (i in unique(distancia$vendedor)){
Vend_atual<-distancia %>% filter(vendedor == i & data_visita== j)
dista_d[cont]<-perimeter(data.frame(Vend_atual$lon, Vend_atual$lat))
Data[cont]<- j
Vendedor[cont]<- i
cont<- cont + 1
}
}
dista_dia<-data.frame(Vendedor, Data, dista_d/1000)
dista_dia
dista_dia<-data.frame(Vendedor, as.Date(Data), dista_d/1000)
as.POSIXct(Data)
dista_dia<-data.frame(Vendedor, as.POSIXct(Data, origin = "2019-01-01"), dista_d/1000)
dista_dia
tail(dista_dia)
View(distancia)
dista_dia<-data.frame(Vendedor, as.POSIXct(Data, origin = "2021-09-07"), dista_d/1000)
tail(dista_dia)
dista_dia<-data.frame(Vendedor, Data, dista_d/1000)
tail(dista_dia)
dista_d/1000
dista_dia<-data.frame(Vendedor, Data, dista_d/1000)
tail(dista_dia)
tail
tail
(dista_dia)
dista_dia<-data.frame(Vendedor, Data, round(dista_d/1000, digits = 2))
(dista_dia)
as.POSIXct(Data, origin = Data[1])
as.Date(unclass(time(Date)), origin = "2021-09-07")
x <- ts(rnorm(10), start = 0)
x
Data<-ts(Data)
as.Date(unclass(time(Data)), origin = "2021-09-07")
as.Date(Data)
as.Date(levels(Data), format="%d.%m.%Y")
levels(Data)
Data
#tabela de distancia por dia
dista_d<-c()
Data<-c()
Vendedor<-c()
cont<-1
distancia$data_visita<-as.Date(distancia$data_visita)
#criando uma função para agregar as distancias por vendedor
for (j in unique(distancia$data_visita)){
for (i in unique(distancia$vendedor)){
Vend_atual<-distancia %>% filter(vendedor == i & data_visita== j)
dista_d[cont]<-perimeter(data.frame(Vend_atual$lon, Vend_atual$lat))
Data[cont]<- j
Vendedor[cont]<- i
cont<- cont + 1
}
}
as.Date(levels(Data), format="%d.%m.%Y")
Data
levels(Data)
format(as.Date(Data, origin = "1899-12-30"), "%m/%d/%y")
min(distancia$)
min(distancia$data_visita)
format(as.Date(Data, origin = "2021-08-02"), "%m/%d/%y")
install.packages("janitor")
library(janitor)
excel_numeric_to_date(Data)
tail(excel_numeric_to_date(Data))
format(as.Date(Data, origin = "2021-08-02"), "%m/%d")
dista_dia<-data.frame(Vendedor, Data, round(dista_d/1000, digits = 2))
(dista_dia)
tail(excel_numeric_to_date(as.numeric(Data)))
unique(distancia$data_visita)
#tabela de distancia por dia
dista_d<-c()
Data<-c()
Vendedor<-c()
cont<-1
min(distancia$data_visita)
distancia$data_visita<-as.Date(distancia$data_visita)
#criando uma função para agregar as distancias por vendedor
for (j in unique(distancia$data_visita)){
for (i in unique(distancia$vendedor)){
Vend_atual<-distancia %>% filter(vendedor == i & data_visita== j)
dista_d[cont]<-perimeter(data.frame(Vend_atual$lon, Vend_atual$lat))
Data[cont]<- unique(distancia$data_visita)[j]
Vendedor[cont]<- i
cont<- cont + 1
}
}
dista_dia<-data.frame(Vendedor, Data, round(dista_d/1000, digits = 2))
(dista_dia)
unique(distancia$data_visita)
#tabela de distancia por dia
dista_d<-c()
Data<-c()
Vendedor<-c()
cont<-1
min(distancia$data_visita)
distancia$data_visita<-as.Date(distancia$data_visita)
#criando uma função para agregar as distancias por vendedor
for (j in unique(distancia$data_visita)){
for (i in unique(distancia$vendedor)){
Vend_atual<-distancia %>% filter(vendedor == i & data_visita== j)
dista_d[cont]<-perimeter(data.frame(Vend_atual$lon, Vend_atual$lat))
Data[cont]<- unique(distancia$data_visita)[cont]
Vendedor[cont]<- i
cont<- cont + 1
}
}
dista_dia<-data.frame(Vendedor, Data, round(dista_d/1000, digits = 2))
(dista_dia)
unique(distancia$data_visita)[2]
unique(distancia$data_visita)[1]
Data
